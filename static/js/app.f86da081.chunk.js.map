{"version":3,"sources":["color.js","components/ToDoItem.js","App.js"],"names":["theme","ToDoItem","toDos","id","setToDos","saveToDos","useState","text","newText","setNewText","edit","setEdit","updateToDo","newToDos","AsyncStorage","setItem","JSON","stringify","prev","View","style","styles","toDo","TextInput","returnKeyType","onSubmitEditing","onChangeText","payload","value","backgroundColor","width","height","toDoIcon","TouchableOpacity","onPress","marginRight","Text","Entypo","name","size","color","toDoText","done","textDecorationLine","Fontisto","Platform","OS","confirm","Alert","alert","StyleSheet","create","marginBottom","paddingVertical","paddingHorizontal","borderRadius","flexDirection","justifyContent","alignItems","fontSize","fontWeight","App","working","setWorking","setText","useEffect","loadMenu","loadToDos","res","getItem","parse","err","console","log","onMenuHandler","addToDo","Date","now","container","StatusBar","header","btnText","placeholder","input","ScrollView","Object","keys","map","flex","marginTop","marginVertical"],"mappings":"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","file":"static/js/app.f86da081.chunk.js","sourcesContent":["export const theme = {\r\n  bg: \"black\",\r\n  grey: \"#3A3D40\",\r\n};\r\n","import { useState } from \"react\";\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  Alert,\r\n  Platform,\r\n} from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { theme } from \"../color\";\r\nimport { Entypo } from \"@expo/vector-icons\";\r\nimport { Fontisto } from \"@expo/vector-icons\";\r\n\r\nconst toDosStorageKey = \"@toDos\";\r\n\r\nconst ToDoItem = ({ toDos, id, setToDos, saveToDos }) => {\r\n  const [newText, setNewText] = useState(toDos[id]?.text);\r\n  const [edit, setEdit] = useState(false);\r\n\r\n  const deleteToDo = () => {\r\n    if (Platform.OS === \"web\") {\r\n      const ok = confirm(\"Do you want to delete this To Do?\");\r\n      if (ok) {\r\n        const newToDos = { ...toDos };\r\n        delete newToDos[id];\r\n        setToDos(newToDos);\r\n        saveToDos(newToDos);\r\n      }\r\n    } else {\r\n      Alert.alert(\"Delete To Do\", \"Are you sure?\", [\r\n        { text: \"Cancel\" },\r\n        {\r\n          text: \"I'm sure\",\r\n          onPress: () => {\r\n            const newToDos = { ...toDos };\r\n            delete newToDos[id];\r\n            setToDos(newToDos);\r\n            saveToDos(newToDos);\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const doneToDo = () => {\r\n    const newToDos = { ...toDos };\r\n    newToDos[id].done = !newToDos[id].done;\r\n    AsyncStorage.setItem(toDosStorageKey, JSON.stringify(newToDos));\r\n    setToDos(newToDos);\r\n  };\r\n\r\n  const onChangeText = (payload) => {\r\n    setNewText(payload);\r\n  };\r\n  const editHandler = () => {\r\n    setEdit((prev) => !prev);\r\n  };\r\n  const updateToDo = () => {\r\n    const newToDos = { ...toDos };\r\n    newToDos[id].text = newText;\r\n    AsyncStorage.setItem(toDosStorageKey, JSON.stringify(newToDos));\r\n    setEdit((prev) => !prev);\r\n    saveToDos(newToDos);\r\n    setToDos(newToDos);\r\n  };\r\n\r\n  return (\r\n    <View style={styles.toDo}>\r\n      {!edit ? (\r\n        <>\r\n          <Text\r\n            style={{\r\n              ...styles.toDoText,\r\n              color: toDos[id]?.done ? \"gray\" : \"white\",\r\n              textDecorationLine: toDos[id]?.done ? \"line-through\" : \"none\",\r\n            }}\r\n          >\r\n            {toDos[id]?.text}\r\n          </Text>\r\n          <View style={styles.toDoIcon}>\r\n            <TouchableOpacity onPress={doneToDo} style={{ marginRight: 15 }}>\r\n              <Text>\r\n                <Fontisto name=\"check\" size={18} color=\"white\" />\r\n              </Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={editHandler} style={{ marginRight: 15 }}>\r\n              <Text>\r\n                <Entypo name=\"pencil\" size={24} color=\"yellow\" />\r\n              </Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={deleteToDo} style={styles.toDoIcon}>\r\n              <Text>\r\n                <Fontisto name=\"trash\" size={18} color=\"tomato\" />\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <TextInput\r\n            returnKeyType=\"Done\"\r\n            onSubmitEditing={updateToDo}\r\n            onChangeText={onChangeText}\r\n            value={newText}\r\n            style={{\r\n              backgroundColor: \"gray\",\r\n              width: 220,\r\n              height: 50,\r\n            }}\r\n          />\r\n          <View style={styles.toDoIcon}>\r\n            <TouchableOpacity onPress={updateToDo} style={{ marginRight: 15 }}>\r\n              <Text>\r\n                <Entypo name=\"save\" size={24} color=\"yellow\" />\r\n              </Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n        </>\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ToDoItem;\r\n\r\nconst styles = StyleSheet.create({\r\n  toDo: {\r\n    backgroundColor: theme.grey,\r\n    marginBottom: 10,\r\n    paddingVertical: 30,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 15,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  toDoText: {\r\n    color: \"white\",\r\n    fontSize: 16,\r\n    fontWeight: \"500\",\r\n  },\r\n  toDoIcon: {\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n","import { StatusBar } from \"expo-status-bar\";\nimport { useEffect, useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  ScrollView,\n} from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./color\";\nimport ToDoItem from \"./components/ToDoItem\";\n\nconst workingStorageKey = \"@menu\";\nconst toDosStorageKey = \"@toDos\";\n\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [toDos, setToDos] = useState({});\n\n  useEffect(() => {\n    loadMenu();\n    loadToDos();\n  }, []);\n\n  const loadToDos = async () => {\n    try {\n      const res = await AsyncStorage.getItem(toDosStorageKey);\n      if (res) {\n        setToDos(JSON.parse(res));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onMenuHandler = async (payload) => {\n    await AsyncStorage.setItem(workingStorageKey, `${payload}`);\n    setWorking(payload);\n  };\n\n  const loadMenu = async () => {\n    try {\n      const res = await AsyncStorage.getItem(workingStorageKey);\n      setWorking(JSON.parse(res));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const onChangeText = (payload) => {\n    setText(payload);\n  };\n\n  const saveToDos = async (newToDos) => {\n    await AsyncStorage.setItem(toDosStorageKey, JSON.stringify(newToDos));\n  };\n\n  const addToDo = async () => {\n    if (text === \"\") {\n      return;\n    }\n    const newToDos = { ...toDos, [Date.now()]: { text, working, done: false } };\n    setToDos(newToDos);\n    await saveToDos(newToDos);\n    setText(\"\");\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => onMenuHandler(true)}>\n          <Text\n            style={{ ...styles.btnText, color: working ? \"white\" : theme.grey }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={() => onMenuHandler(false)}>\n          <Text\n            style={{\n              ...styles.btnText,\n              color: !working ? \"white\" : theme.grey,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <TextInput\n        returnKeyType=\"Done\"\n        onSubmitEditing={addToDo}\n        onChangeText={onChangeText}\n        value={text}\n        placeholder={working ? \"Add To Do\" : \"Where do you want to go?\"}\n        style={styles.input}\n      />\n      <ScrollView>\n        {Object.keys(toDos)?.map((id) =>\n          toDos[id].working === working ? (\n            <ToDoItem\n              toDos={toDos}\n              key={id}\n              id={id}\n              setToDos={setToDos}\n              saveToDos={saveToDos}\n            />\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    justifyContent: \"space-between\",\n    flexDirection: \"row\",\n    marginTop: 100,\n  },\n  btnText: {\n    fontSize: 38,\n    fontWeight: \"600\",\n  },\n  input: {\n    backgroundColor: \"white\",\n    paddingVertical: 15,\n    paddingHorizontal: 20,\n    borderRadius: 30,\n    marginTop: 20,\n    fontSize: 18,\n    marginVertical: 20,\n  },\n});\n"],"sourceRoot":""}